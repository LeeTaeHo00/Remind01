Remote repository : 원격저장소
	원격 저장소에 올리기 위해 git-hub 저장공간(repository)을 만들고 그 주소를 git bash를 이용해 연결해주는 작업이 선행되어야 한다.
	push(로컬저장소 -> 원격 저장소) / pull(원격저장소-> 로컬저장소)
	fetch (새로 고침)

1. 저장소의 종류
	로컬 저장소 : 개인 pc에서 사용하는 저장소
	원격 저장소 : github 같은 사이트 등을 이용하여 어떤 서버에 올려놓고 사용하는 저장소이다
	
2. 원격저장소 생성
	description : 깃에 관한 설명

3. 원격 저장소 관련 명령어
	git remote add 원격저장소이름 주소, 원격 저장소가 만들어져 있어야한다.
				      원격 저장소를 내 로컬과 연결하는 명령어
				      원격 저장소 이름은 origin 이 많이 쓰인다.
	
	git remote -v 
		원격 저장소와 연결이 잘되어있는지 확인하는 명령어
		origin 주소(fetch)
		origin 주소 (push)
		둘다 떠야함
		- fetch : 새로고침 역할
		- push : 원격 저장소에 파일을 올릴 때 사용한다.

	git pull 원격저장소이름 브랜치이름
		원격 저장소에 저장한 파일들을 로컬 저장소로 가져오는 명령어
	
	git push 원격저장소이름 브랜치이름
		로컬 저장소에 커밋한 파일을 원격 저장소에 저장하는 명령어

	git clone 원격저장소주소 저장할 경로 (. 은 현재 폴더)
		원격 저장소에 있는 파일을 모두 복사하여 로컬 저장소에 가져온다.
		다른 사람이 서버에 올려놓은 git 저장소를 내 컴퓨터에 똑같이 복사해오는 용도
		보통 처음 세팅할 때 사용
		주의사항 : 클록할 땐 init 하면 안된다.
		inti 은 내로컬에서 .git 폴더를 생성하고 처음부터 관리할때 사용하고
		clone 은 다른 사람이 관리하던 log 내용까지 전부 복제해오는 것이다.
		clone 은 메인 기준

	git pull 원격저장주소이름 브렌치이름 --allow-unrelated-histories
		두 저장소의 히스토리가 다를경우 그 저장소의 히스토리를 강제로 병합한다.
		pull 을 받은 후에는 브랜치 생성이 가능해진다.

3. 에러
git push, pull (fatal: refusing to merge unrelated histories) 에러 : 
								두개의 깃 저장소에 서로 다른 히스토리를 가지고 있을 때 발생한다. 두 저장소가 공토의 부모 커밋이 없다고 판단되면 에러가 나타난다.
								- 빈저장소에서 git init 명령어를 사용해서 새로운 저장소를 만들었을 때
								- 로컬 저장소를 초기화하고 리모트 저장소를 추가한 후에 리모트 저장소에서 변경사항을 가져올 때
								- 이때 위에 있는 git pull origin main --allow-unrelated-histories 로 두 저장소의 히스토리를 강제로 병합한다.	
								- 항상 현재 변경사항의 내용을 백업하고 검토한 후에 사용해야 한다.(병합에 문제가 생길 수 있다.)

fatal: couldn't find remote ref main : 


==================================================================

1) 브랜치(branch) : 한개의 저장소를 여러 갈래로 나누어 관리할 수 있게해주는 개념
	브랜치끼리는 서로 영향을 받지 않기 때문에 개별적인 작업을 진행 할 수 있따.
	Git은 기본적으로 master 브랜치를 메인으로 사용한다.
	GitHub는 기본적으로 main 브랜치를 메인으로 사용한다.

- 브랜치 명령어
	git branch : 현재 브랜치 목록

	git branch 브랜치 이름 : 새 브랜치 만들기

	git checkout 브랜치이름 : 브랜치 간 이동

	git switch 브랜치이름 : 브랜치 이동

	git switch -c 브랜치이름 : 브랜치 만들고 해당 브랜치로 바로 이동

	git brach -D 브랜치이름 : 브랜치 삭제, 현재 사용중인 브랜치는 삭제할 수 없음
			       코밋할때 현재 수정한 사람 이름을 적어두는것이 좋다.
				로그는 남기 때문

	git brach -m 기존이름 변경할이름 : 브랜치 이름 변경

	git merge 브랜치 이름 : 두 브랜치를 병합시켜주는 것 git merge 브랜치 이름
			     만약 두 브랜치의 상태가 완전 달라진다면 설정창이 뜨게 된다.
			     만약 두 브랜치에 이떤 같은 파일이 내용이 다를 경우 가장 최신에 수정한 파일로 수정된다.
			
- 브랜치는 무조건 한번의 commit을 해줘야 만들 수 있다.

2) 브랜치를 사용하는 이유
	원본(main)을 안전하게 보호하기 위함
	기능별로 따로 작업가능하기 때문
	협업에 유리함
	하나에 폴더에서 파일을 


==========================복습=====================================
기본명령어
	git -> 기본 명령어 앞에 붙혀야하는거
	git config --list
	git config --global user.name
	git config --global user.email
	git init
	git status
	git add . or ""
	git commit  -m ""
	git log
	git log --pretty=oneline
	git checkout 체크섬 or 브랜치이름 -
	git commit --amend -m "수정할 메시지"

: 클론
; 세미클론

git 와 github의 master 이름 이 다르다 git은 master, github는 main
브랜치 이동전 status 를 확인하여 파일이 존재하는지 확인해줘야 한다.
스테이징 상태 혹은 언트랙티드 상태에서는 브랜치 이동이 가능하다. -> 조심해줘야함
git status 는 하나의 행동을 할때마다 계속 해줘야함

git 이 있는 상태에서 commit을 하면 링크가 commit 된다. .git이 있는 파일을 init 하지 않도록 조심해야함
만약 해당 .git을 삭제할 경우 링크는 작동하지 않는다.

==========================실습=====================================
[실습1] 브랜치 생성, 병합, 삭제
1. main 브랜치에서 기본 파일을 만든다 : readme.txt(250612 10:28 create basic file)
	이름 변경 git branch -m 기존이름 바꿀이름

2. 커밋 메시지 (날짜 시간 main브랜치-readme.txt 파일 생성)

3. 새로운 브랜치 생성 후 dev 브랜치 이동한다.
	git branch dev
	git branch sec
	git branch test
	git swich dev
	
	
	
4. dev 브랜치에서 dev_note.txt 파일을 생성 후 커밋
	이공간은 dev브랜치에서 작업중입니다.
	프로젝트 02 폴더에서 devnot 파이 ㄹ생성, 이 공간은 dev브랜치에서 작업중이니다 작성후 저장
	git status
	git add .
	git status
	git commit -m ""
	git log

5. sec 브랜치에서 sec_note.txt 파일 생성 저장 후 커밋한다.
	이공간은 sec 브랜치에서 작업중입니다.
	git switch sec
	이후 4번

6. test 브랜치에서 dev 브랜치를 병합하고 상태 확인한다.
	git switch test
	git status
	git log(메인 로그만 있음)
	git merge dve
	git log (로그 2개)

7. test 브랜치에서 있는 파일 dev_note.txt 내용을 dev 브랜치에서 test 브랜치로 옮겨왔습니다 라는 내뇽을 추가한다.
	dev_note.txt 파일 내용을 수정한다
	git status
	git add .
	git status
	git commit -m ""
	git log

	
8. dev 브랜치에 test 브랜치를 병합하고 상태 확인한다.

	git switch dev
	git merge test
	git log

+. test 브랜치에서 dev_note.txt 모든 내용 삭제 test만 쓰기 후 코밋
	dev 브랜치에서 test 브랜치 병합

	git switch test, dev_note 파일 내용 모두 삭제후 test 쓰고 저장
	git status
	git add .
	git commit-m "test브랜치 dev파일 기존 내용 삭제, test만 추가"
	git log
	git switch dev
	git merge test
	git log


=====================================================
[실습2]
1. 폴더 생성 / 원격 레포지토리 생성
2. 초기 세팅 (파일 3개 만들기)
3. 원격 저장소와 로컬 저장소 연결
4. 브랜치명은 main, team1, test
5. test 브랜치에 파일 3개를 push 해주고
6. team1 브랜치에는 보인이름 이니셜 파일 1개 생성 후 push
====================================================
[실습3]
개인 원격 레포지토리

개인 로컬 레포지토리 -> 개인 이니셜 브랜치
이니셜.txt

커밋은 이니셜 브런치에서 
push는 무조건 main 브런치에서
====================================================
[문제]

1. 첫번째 파일을 생성하고 commit을 한 상태이다. 파일을 생성하고 저장해야하는데 저장하지 않은 상태로 commit을 해버렸따, 이전으로 돌아갈 수 있는 방법이 있는가?
	log 로 체크섬을 확인해준 후(7자리)=> 첫번째 파일 생성한 commit 한 log
	git checkout 체크섬7자리

2. 팀원들끼리 색상을 한 줄씩 추가하면서 커밋을 하고있따. 
   총 5명의 팀원이 있고 현재 4번째까지 완료한 상태이다. 
   2번쨰 팀원이 잘 못 작성했다고 해서 다시 브런치를 만들려고 한다.(test)
   다음 중 정답은?

   1. 마지막 pull 한 상태로 test브런치 만들고 수정하고 commit한 후 main 브런치에서 merge하고 push를 다시한다.
   2. 두번쨰 commit 부터 새로 만든다.
   3. 각자 브런치를 만들었다면 2번째 팀원만 제외하고 merge를 먼저 진행 후 2번째 팀원이 수정 완료되면 그 후 최종 merge를 진행
   4. 2번쨰 팀원이 본인이 작성한 부분 수정하고 다시 push한다.
   5. 2번쨰 팀원이 commit한 부분으로 돌아간다 test 브런치를 만든 뒤 수정 후 test 브런치와 main 브런치를 병합한다. -> 정답

3. 