day01(git 1일차)

단축키정리 -> git -> git기초 -> git 원격 저장소
집에가서 할거
노션 로그인
노션 안에 오늘 한거 정리
깃 폴더 만들어서 한번 더 실습 해보기

==============================================

0. 단축키 정리
파일탐색기 windows + e
새폴더 만들기 ctrl + shift + n
이름 바꾸기 F2
실행탐색키 Windows + r
터미널 git bash 복사 shift + insert

- 메모장
글씨 크기 조절 CTRL + 마우스 휠(위아래)
들여쓰기 tab

==============================================

1. git
- git hub 사이트 가입

1) 버전(Version)
	- 프로그램을 수정하여 개선한 것
	- 정식버전은 1부터 시작
	- 수정이 이루어지며 숫자가 늘어남

	- 소스코드가 전버전과 비교하여 유의미하게 바뀌었을때 다르게됨
		- 1.n 	: 작은 변화기 있을 경우 점 뒤 숫자(마이너 버전 번호)가 바뀜
		- n.0 	: 큰 변화가 있을 경우 앞 숫자(메이저 버전 번호)가 바뀜
		- 1.1.n : 패치버전 번호, 미세한조정(버그조정, 밸런스 패치 등등)

2) 버전 관리(Version Control)
	- 버전 별로 기록하고 관리하는 것
	- 백업과 복구를 하기 좋아짐 => 누가 언제 해당 버전을 만들고 수정했는지 추적기 위함
	
	- 로컬(내컴퓨터) 버전관리 : 
				- 다른 컴퓨터에서 접근할 수 없음
				- 작업하는 내용물을 현재 시점에서 복사해두고 압축하여 보관
				- 간단하지만 실수로 지우거나 잘 못 수정하는 경우가 많음
	- 원격	버전관리

3) 버전 관리 시스템(Version Control System)
	- 파일의 변화 내용을 기록, 관리하고 추적을 도와주는 소프트웨어

==============================================

2. Git 과 GitHub
	* 차이점
	- git  : 여러 버전관리 시스템 중 하나(로컬에서 사용)
		- git만의 방식으로 버전별 파일을 저장, 관리
		- 굉장히 빠르고 버전을 분산하여 저장하므로 안전하다.
		- 다른 버전관리 시스템보다 아려움

	- github : git을 저장하고 공유할 수 있는 (**서버를 제공하는 사이트**) 중 하나
		- Github  서버에 내 git을 저장해두면 다른 pc에서도 쉽게 버전을 관리할 수 있다.
		- 다른 개발자들과 git을 공유하여 협업이 된다는 장점이 있다.

==============================================

3. git 구조 : 3가지 영역으로 나뉘며 각 영역에 순차적으로 파일을 올려야한다

Working directory(untracked)(작업폴더) : 

- 내가 작업하는 공간을 working directory 로 설정해둔다.
- git init 명령어를 통해 폴더를 관리되는 상태로 만든다
- 설정하면 해당폴더에 .git이라는 폴더가 생성된다.(보기 > 숨김폴더 체크)
- 이 영역에 있는 파일들은 아직 git의 관리 대상이 아니다.(Untracked 상태)

Staging Area(스테이징영역) :
- 이 영역에 있는 파일들은 git의 관리 대상이다
- 수정 추가 삭제등 이 영역 파일들의 변경사항을 git이 저장하고 관리한다.
- 수정사항을 바로 Local Repository 에 커밋하면 실수가 많아질 것이기 때문에 스테이징 영역에서 우선 수정 내용들을 검토하고  확인 후 로컬 저장소에 커밋한다.
	- 스테이징 : 스테이지 영역에 파일을 올리는 것이며(staged 상태) 파일은 3가지 상태를 가진다.  
		tracked 상태 종류
		- 1. unmodified : 수정이 되지 않은 상태
		- 2. modified : 스테이징 영역에 들어온 파일 중 수정이 된 상태
		- 3. staged : 로컬 저장소에 올릴 준비가 완료된 상태

- 실수를 최소화하기 위한 과정

Local Repository (로컬 저장소) : 
- 스테이징 영역에서 staged 상태의 파일을 commit 하면 로컬 저장소에 저장된다
- 로컬 저장소에 commit 한다는 것은 스테이징 스테이징 영역의 수정사항을 확정짓는 것이다(새로운 버전을 하나 만들고 저장)
- 내가 원할 때 언제나 저장한 버전(commit한 시점)으로 돌아갈 수 있따.
- staged 상태가 아니면 commit 되지 않는다.

Remote Repository(원격 저장소)
	- git-hub 같은 사이트 등을 이용하여 어떤 서버에 올려놓고 사용하는 저장소
	- 협업을 위해 사용하는 것이 일반적이지만 개인 작업을 올려두는 장소로도 사용

==============================================

4. git 설치
	cmd에 git을 쳐서 도움말이 나올 경우 설치 되어있음
	설치 경로 이름 중에 띄어쓰기가 있을 경우 작동을 안하는 경우가 있음
	
	구글에서 git 검색 -> 최신 버전 다운로드 -> 64bit-Installer 다운받기
	git안의 resource폴더로 파일 이동시키기 > 인스탈러 실행후 파일 경로에 띄어쓰기만 제거한 후(C:\git) next -> 설치완료

==============================================

5. git 사용하기
	1) CLI(Command Line Interface) : 	CMD, 터미널 등 에서 명령어로 조작하는것
						GUI보다 어렵지만 git의 모든 기능을 사용하기 위해서는 CLI를 사용하는 것이 좋다.

	2) GUI(Graphic User Interface) : 	일반 프로그램 처럼 눈으로 보고 버튼을 눌러 사용한다.
						사용방법이 편리하지만 단순하게 만들었기에 많은 기능이 없다.

	- 깃관리 폴더 만들기 : 원하는 폴더 우클릿 후 git bash here
	- 깃은 한글 모름
	- git 은 빈파일을 인식못함
	- /는 폴더의미
	- head = 현재 위치
	- master

==============================================

6. git 기초 명령어
	git 명령어 앞에는 항상 git을 붙이고 사용한다.
	git config : 	환경설정을 하는 명령어
			설치 후 반드시 초기설정을 해줘야한다.
			- git config --list : 현재 환경설정 확인 명령어
			- 글로벌설정 : 	git config --global user.email "이메일주소"
					git config --global user.name "유저이름"
					git hub와 사용하기 때문에 git-hub계정의 닉네임과 이메일을 동일하게 설정해야 한다.
					--global 옵션으로 설정한 내용은 설치 후 한번만 해주면 됨
					학원컴은 내계정으로 되어 있는지 매번 확인해줘야함
	git -v : 버전 확인

	git init 	: 현재 위치의 폴더를 working directory(깃 저장소)로 만든다.
			  .git 폴더 만들어짐

	git status 	: 현재 깃 저장소에 있는 파일들의 상태를 확인한다.

	git add	파일명	: 한 파일을 staging 영역으로 올림

	git add .	: (. 은 현재 폴더를 의미)작업 폴더에 있는 모든 파일을 staging 영역으로 올림
			  파일명을 작성하는 부분에 .을 사용하면 현재 경로의 모든 파일과 변경사항을 스테이징한다.

	git commit -m "": 스테이징 영역의 파일들의 변경사항을 확정짓고 새로운 버전을 로컬 저장소에 저장한다.

			  커밋을 할 떄 어떤 파일에 어떤 수정사항이 있었는지 메시지를 작성하는 것이 좋다.
			  메세지가 없으면 버전을 되돌릴 떄 어떤 시점으로 가야하는지 알 수 없음
			  메세지를 장난으로 쓰지 말자

	git log 	: git에 저장된 commit 기록을 볼 수 있따.
			  가장 최근 commit 부터 상단에 출력된다.
			  출력결과의 commit 뒤에 붙는 16진수 해시코드는 해당 commit id 또는 체크섬이라고 부른다.
			  author 수정자, date 수정일자가 같이 나온다.(언제 누가 무엇을 했는지 모두 기록된다.)
	
	git log --pretty=oneline 
			: 커밋 기록을 출력할 때 옵션을 주어 한줄로 깔끔하게 볼 수 있따.

	git checkout 체크섬 or 브랜치 이름 or -
			: 현재 프로젝트의 상태를 원하는 시점으로 이동하는 명령어
			  log 를 통해서 확인한 체크섬을 복사 붙여넣기 하면 해당시점으로 이동
			  - 를 사용하면 가장 최근 커밋으로 돌아간다.

	git commit --amend -m "수정내용"
			: 제일 마지막 커밋한 메시지 변경

==============================================

Consolas : 숫자 1과 l을 구분할 수 있는 글꼴
SVN : Git과 비슷한 버전관리 시스템
	- 서버에 문제가 생기면 복구가 불가능
	- 사용하는 회사는 .bk 파일에 백업파일을 만들어뒀음

==============================================

[실습] workspace 폴더에서 아래 순서대로 진행

1. project01 폴더를 만든다
2. project01 폴더에서 git bash를 실행한다
3. 현재 폴더를 git 저장소로 만든다
4. 본인이름이니셜.txt 파일을 만들고 파일안에 git 연습 프로젝트라고 작성 후 저장한다.
5. 변경된 파일 상태를 확인한다.
6. 모든 변경사항을 스테이징 영역에 올린다.
7. 날짜와 시간 + 메시지로 커밋한다.
8. 커밋 기록을 확인한다.

[실습2]
9. project01 폴더 내에 info.txt를 만들고 안에 오늘의 git 학습내용 정리라고 작성한다.
10. 변경된 파일 상태 확인 후 스테이징하고 커밋한다.
11. info.txt파일에 본인이 오늘 배운 내용을 5가지만 기억남는대로 작성 후 저장한다.
12. 변경된 파일 상태 확인 후 스테이징하고 커밋한다.
13. 로그기록을 간략하게 확인한다.