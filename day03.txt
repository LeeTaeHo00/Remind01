day03

0. 복습
git : 버전 관리 시스템(로컬에서 사용)
git hub : git을 저장하고 여러 사람과 사용할 수 있게 해주는 서버를 제공하는 사이트

git의 구조
	working directory -> 파일은 untracked 상태
		git init

	Staging Area -> tracked, 실수를 최소하 하기 위한 단계
		unmodified : 수정이 되지 않은 상태
		modified : 스테이징 영역에 들어온 파일 중 수정이 된 상태
		staged : 로컬 저장소에 들어올 준비가 된 상태
	
	Local Repository
		git commit -m "메시지"
		내가 원할 때 언제든 이전에 저장한 버전으로(이전 commit 시점)으로 돌아갈 수 있다.

	Remote Repository
		git-hub(원격 저장소) : 깃허브에 레포지토리 만들어둬야함, 다른 사람 주소에는 권한이 없기에 push 불가능

		git remote add 이름 주소
		git remote -v : 등록된 원격 저장소 확인

		git remote show 원격저장소 이름 : 원격 저장소의 상세정보 보기

		git push 원격 저장소 이름 브랜치명 : 로컬 브랜치의 변경내용을 원격저장소로 보내기
		git pull 원격 저장소 이름 브랜치명 : 원격 저장소의 변경내용을 가져오고 현재 브랜치에 병합
		git fetch 원격 저장소 이름 : 원격 저장소의 변경내용을 ㄱ져오기만 한고 병합은 하지 않음
		
		git remote rename 기존이름 변경이름 : 이름 변경
		git remote remove 원격 저장소 이름
		git fetch --prune : 원격에서 삭제된 브랜치를 로컬에서도 제거(이미 삭제된 원격 브랜치가 로컬에 남아있는 경우)
		git remote set-url 원격저장소이름 주소 : 원격 저장소 uRL 수정'

		ehco "3일 차 수업" > test1.txt : 파일이 없다면 만든 후 그곳에 내용추가, 리눅스 명령어
		touch 파일명.확장자 : 파일생성, 리눅스 명령어
		ls -al : 파일 목록 확인
		vi 파일명.확장자 : 파일 내용 수정
		git commit --amend -m "수정내용" : 커밋 내용 수정

		git clone 할때 .git 파일에 위치를 잘 봐줘야함
		
	
	파일을 리눅스 명령어를 이용해서 생성 했을 때 나타나는 메시지 : 

	warning: in the working copy of 'test1.txt', LF will be replaced by CSLF the next time Git touches it

	  단순 경고 메시지
	  LF 방식으로 만들어진 파일이 CSLF파일로 바뀔것이다. -> 커밋 후 시점



브랜치
	한 개의 저장소를 여러 갈래로 나누어서 관리할 수 있는 것
	한 개 이상의 로그가 있어야 가능함
	브랜치 끼리는 영향을 받지 않기 때문에 개별적인 작업을 진행할 수 있다.
	git 은 기본적으로 master, git hub는 main 으로 디폴트 브랜치임
	
	git branch
	git branch 브랜치이름
	git switch or checkout
	git switch -c 브랜치이름
	git branch -m 기존이름 변경할 이름
	git branch -D 브랜치이름
	git merge 병합할 브랜치이름
	git rm --cached <file>...

	(main) 브랜치에서 작업을 진행 후 커밋을 완료했다.
	이후 (test) 브랜치에서 main에서 작업한 내용을 병합하려고 한다면
	test 브랜치로 이동후 merge를 해줘야한다.

git log 
	커밋 메시지, 체크섬, 작업자 를 확인 가능
	원격 push pull 내용 확인 가능
	원격에서 버튼으로 작업한 내용은 확인할 수 없다.

[실습1]
1. WorkingSpace에 gitTest1이라는 폴더 만들기
2. test1.txt 파일에 "3일차 수업" 작성
3. test2.txt 파일에 "2교시 수업중" 으로 작성
4. 상태 확인 후 커밋까지 진행(커밋 메시지 형식 : 날짜 시간 어떤파일 생성했는지/수정했는지 작성"
5. 원격 레포지토리 gitTest1이라는 이름으로 만들기(원격)
6. 원격 레포지토리와 로컬 레포지토리 연결 (Readme 파일 생성)
7. test1.txt, text2.txt 파일 push

[실습2] 클론 후 브랜치 생성 작업
1. WorkingSpace에 gitTest2라는 폴더 만들기
2. 원격저장소 클론 받기 (위치는 workspace gittest2 폴더)
3. 새로운 브랜치 생성(test-file, test-dev)
4. test-file 브랜치로 test3.txt 파일에 "클론 후 작업 중" 작성
5. 커밋 (클론 내용 작성)
6. test-dev 브랜치로 test4.txt 파일 만들고 아무내용 작성x
7. test-dev 브랜치에서 test1.txt 파일에 내용 "2번째 실습" 추가
8. 커밋 후 main 브랜치로 이동 후 test-dev 브랜치를 병합
9. 해당 내용을 main에서 push


[실습3] 팀별 실습
1. 팀원1이 레포지토리 gitClone 만들기(원격, 로컬)
2. 원격에서 readme.md 파일 추가
3. gitclone.txt 파일을 만들고 팀명과 본인 이름을 추가한다.
4. 본인이 만든 원격 ㅔㄹ포지토리에 올린다.

5. 팀원 2가 팀원1이 만든 레포지토리 클론 후 gitclone.txt파일 아래에 본인 이름을 추가한다.
6. 본인의 원격 레포지토리에 올린다.

7. 나머지 팀원들도 진행 후 팀장이 받아서 본인 이름을 추가한다.
8. 깃허브링크를 단톡방에 올린다.

git remote set-url origin 자기주소
		
		
[실습4]
1. 팀원 1명이 개인 레포지토리 만들고 나머지 clone해서 사용
2. 팀원이 직접 git remote add 로 팀장의 레포지토리를 등록
3. 하나의 레포지토리 안에서 브랜치를 만들어 팀원이 각자 파일을 생성
4. 팀장은 각 팀원의 브랜치를 pul 받아서 병합
5. 각자 이니셜로 브랜치 하나 만들기
6. 해당 브랜치로 이동
7. 해당 브랜치에 각자 파일 생성
8. 권한 부여
9. 팀원 1 : login.html 생성, 메모장 다른 이름으로 저장 (파일형식 : 모든 파일) (내용 : 로그인 기능)
10. 팀원 2 : sigin.html 회원가입 기능
11. 팀원 3 : write.html 쓰기 기능
12. 팀원 4 : update.html 수정 기능
13. 팀원 5 : delete.html 삭제 기능

브런치 명은 본인 이름 이니셜